/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import * as anchor from "@project-serum/anchor";
import { Program } from "@project-serum/anchor";
import { BoyncAnchorProgram } from "../../target/types/boync_anchor_program";

import {
  Connection,
  PublicKey,
} from '@solana/web3.js';
import path from 'path';
import fs from 'mz/fs';

import {createKeypairFromFile} from './utils';

/**
 * Boync Program as generated by `anchor build`;
 */
const program = anchor.workspace.BoyncAnchorProgram as Program<BoyncAnchorProgram>;
/**
 * Anchor Provider;
 */
const anchorProvider = anchor.AnchorProvider.env();

/**
 * Connection to the network
 */
let connection: Connection;

/**
 * BoyncUser Bob's PDA
 */
let bobUserPDA: PublicKey;

/**
 * Main BoyncAuction program id
 */
let programId: PublicKey;

/**
 * Path to program files
 */
const PROGRAM_PATH = path.resolve(__dirname, '../../target/deploy');

/**
 * Path to program shared object file which should be deployed on chain.
 * This file is created when running either:
 *   - `npm run build:program-rust`
 */
const PROGRAM_SO_PATH = path.join(PROGRAM_PATH, 'boync_anchor_program.so');

/**
 * Path to the keypair of the deployed program.
 * This file is created when running `solana program deploy dist/program/helloworld.so`
 */
const PROGRAM_KEYPAIR_PATH = path.join(PROGRAM_PATH, 'boync_anchor_program-keypair.json');

/**
 * Establish a connection to the cluster
 */
export async function establishConnection(): Promise<void> {
  anchor.setProvider(anchorProvider);

  connection = anchorProvider.connection;

  console.log('[Anchor] Provider set. Connection details:', 
    anchorProvider.connection.rpcEndpoint, 
    anchorProvider.connection.getVersion()
  );

  console.log('[Anchor] establishConnection: Done!');
}

/**
 * Check if the hello world BPF program has been deployed
 */
export async function checkBoyncProgram(): Promise<void> {
  // Read program id from keypair file
  try {
    const programKeypair = await createKeypairFromFile(PROGRAM_KEYPAIR_PATH);
    programId = programKeypair.publicKey;
  } catch (err) {
    const errMsg = (err as Error).message;
    throw new Error(
      `Failed to read program keypair at '${PROGRAM_KEYPAIR_PATH}' due to error: ${errMsg}. Program may need to be deployed with \`solana program deploy dist/program/boyncprogram.so\``
    );
  }

  // Check if the program has been deployed
  const programInfo = await connection.getAccountInfo(programId);
  if (programInfo === null) {
    if (fs.existsSync(PROGRAM_SO_PATH)) {
      throw new Error(
        "Program needs to be deployed with `solana program deploy dist/program/helloworld.so`"
      );
    } else {
      throw new Error("Program needs to be built and deployed");
    }
  } else if (!programInfo.executable) {
    throw new Error(`Program is not executable`);
  }

  console.log(`Using program ${programId.toBase58()}`);

  //Derive the address (public key) of a greeting account from the program so that it's easy to find later.
  // boyncAuctionPubkey = await PublicKey.createWithSeed(
  //   payer.publicKey,
  //   "hello", // seed
  //   programId
  // );
}

export async function initBoyncUser(): Promise<void> {
  const [_bobUserPDA, _] = await PublicKey
  .findProgramAddress(
    [
      anchor.utils.bytes.utf8.encode('user'),
      anchorProvider.wallet.publicKey.toBuffer(),
    ],
    program.programId
  );

  bobUserPDA = _bobUserPDA;

  console.log('[Anchor] Initialize Boync User with Bob User PDA:', bobUserPDA.toBase58());
  console.log('[Anchor] Payer:', anchorProvider.wallet.publicKey.toBase58());

  const bobData = await program.account.boyncUserData.fetch(bobUserPDA);
  if (bobData != null || typeof bobData != 'undefined') {
    console.log(`[Anchor] Boync User with Bob User PDA ${bobUserPDA.toBase58()} already defined:`);
    console.log(bobData);
    return;
  }

  const tx = await program.methods
  .initialize('Bob')
  .accounts({
    user: anchorProvider.wallet.publicKey,
    userData: bobUserPDA,
  })
  .rpc();

  console.log('[Anchor] Done, tx:', tx);
}

export async function checkBoyncUser(): Promise<void> {
  console.log('[Anchor] Fetching Boync User with PDA:', bobUserPDA.toBase58());

  const bobData = await program.account.boyncUserData.fetch(bobUserPDA);

  console.log(`[Anchor] Done. Boync User Data: { name: ${bobData.name}, user: ${bobData.user.toBase58()} }`);
}